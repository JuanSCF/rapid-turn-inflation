#bs-numbers-generator.py

# from scipy.interpolate import interp1d
# from scipy.interpolate import interpn
# from scipy.signal import savgol_filter

import numpy as np
import time
import tqdm as tqdm
# from tqdm import tqdm
import matplotlib.pyplot as plt
import os
import sys
# import polars as pl
import dask.array as da

############################################################################
############################# initialitiazion   ############################
############################################################################

# power spectrum parameters
deltaN=0.1
L=251.327
k00 = 1e11 # Mpc^-1 . '''this gives k_peak=1.287e13 Mpc^-1'''

# initial and final k that will be integrated
ki=10
kf=14
kikf=str(ki)+str(kf)
ki=1*10**ki 
kf=1*10**kf

nkk=100 #number of steps
spacing='geometric' # 'geometric' or 'linear'



kk = np.geomspace(ki, kf, nkk,dtype='float64')
# kk = np.linspace(ki, kf, nkk,dtype='float64', endpoint=False)
k1=kk
k2=kk
'''
probar usando linspace para todos los calculos
'''
#create array for x
num_points = nkk//2  # Divide by 2 to cover the range from -1 to 1

if spacing=='geometric':
    x_positive = np.geomspace(1e-6, 0.9999, num_points)
elif spacing=='linear':
    x_positive = np.linspace(1e-6, 0.9999, num_points)
# # Create the symmetric version covering the range from -1 to 1
# x = np.concatenate((-x_positive[::-1], [0], x_positive))
x = np.concatenate((-x_positive[::-1] , x_positive))

# choices for different triangle configurations
# by default we use the whole range of triangle configurations,
# ie, x goes from -1 to 1

# equilateral
# x=np.array([0.5])

# squeezed
# x=np.array([0.95,0.99,0.999,0.9999])
# theta =[18.19, 8.11, 2.56, 0.81]

# folded
# x=-1*np.array([0.95,0.99,0.999,0.9999])
# theta =[161.8, 171.8, 177.44, 179.19]
# x=-x[::-1]

nx=len(x)

# File names
cwd = os.getcwd()
# file name to save bs data
# databs_file = 'full-x-'+str(nkk)+'-steps-'+spacing+'spacing-'+ str(kikf)+'.npy'
# databs_file = cwd+'\\data\\databs-'+databs_file

# Navigate to the parent directory
# parent_directory = os.path.dirname(cwd)

# Define the directory where you want to save the file
data_directory = os.path.join(cwd, 'data')

# File name to save bs data
databs_file = f'databs-{nkk}-steps-{spacing}-spacing-{kikf}-lambda-{L}.npy'

# Construct the full path including the directory
full_path = os.path.join(data_directory, databs_file)



def bs(K1,K2,x):
    ##if (np.sqrt(K1**2 + K2**2 - 2 * K1 * K2 * x)) < L:
    a= ((((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(K2*np.cos(2*K2) - np.sin(2*K2)))/np.sqrt(-K2**2 + K2*L) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(-2*K2*np.cos(2*K2) + (1 + K2**2)*np.sin(2*K2)) + (2*K2*L*(K2*np.cos(2*K2) - np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(2*K2**2*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(-K2 - 2*K2**3 + L + K2**2*L - 2*(K2 - L + K2**2*L)*np.cos(2*K2) - 4*K2*(K2 - L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) - ((K2 + 2*K2**3 + L + K2**2*L + 2*(K2 + L - K2**2*L)*np.cos(2*K2) + 4*K2*(K2 + L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) + 2*(-((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(np.cos(2*K2) + K2*np.sin(2*K2)))/np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*((1 + K2**2)*np.cos(2*K2) + 2*K2*np.sin(2*K2)) - (2*K2*L*(np.cos(2*K2) + K2*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(-2*K2*(K2 - L)*np.cos(2*K2) + (K2 - L + K2**2*L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((-2*K2*(K2 + L)*np.cos(2*K2) + (K2 + L - K2**2*L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) + 2*K2*(K2*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*(2*K2 - L + L*np.cos(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(2*K2*np.cos(2*K2) + (-1 - K2 + K2**2)*np.sin(2*K2)) - (K2*(2*K2 + L - L*np.cos(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(2*K2**4*np.cos(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((1 - K2**2)*np.cos(2*K2) + K2*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + (((1 - K2**2)*np.cos(2*K2) + K2*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) + ((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(1 + K2*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + (-0.5*np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(-1 - 2*K2**2 + K2*(-1 - K2 + K2**2)*np.cos(2*K2) - 2*K2**2*np.sin(2*K2)) + (K2*L*(1 + K2*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(2*K2**4*np.sin(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(-(K2*np.cos(2*K2)) - (-1 + K2**2)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((-(K2*np.cos(2*K2)) - (-1 + K2**2)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))))*(-0.001953125*((((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(-2*K1*np.cos(2*K1) + (1 + K1**2)*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*(K1**3*(2*K1 - L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1)))/np.sqrt(-K1**2 + K1*L) + (2*K1*(K1**3*(2*K1 + L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(2*K1*(K1 - L)*np.cos(2*K1) - (K1 - L + K1**2*L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((2*K1*(K1 + L)*np.cos(2*K1) + (-K1 - L + K1**2*L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) - ((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((K1 - L + K1**2*L)*np.cos(2*K1) + 2*K1*(K1 - L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + (((K1 + L - K1**2*L)*np.cos(2*K1) + 2*K1*(K1 + L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*((1 + K1**2)*np.cos(2*K1) - 2*K1*(K1 + 2*K1**3 - np.sin(2*K1))) - (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(np.cos(2*K1) + K1*(-K1 + np.sin(2*K1))))/np.sqrt(-K1**2 + K1*L) - (2*K1*L*(np.cos(2*K1) + K1*(K1 + np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*(K1**2 + K2**2 - 2*K1*K2*x)*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + ((L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5)*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(-2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + (2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/(K1**6*(K1**2 + K2**2 - 2*K1*K2*x)**3) - ((((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(-2*K1*np.cos(2*K1) + (1 + K1**2)*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*(K1**3*(2*K1 - L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1)))/np.sqrt(-K1**2 + K1*L) + (2*K1*(K1**3*(2*K1 + L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((K1 - L + K1**2*L)*np.cos(2*K1) + 2*K1*(K1 - L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + (((K1 + L - K1**2*L)*np.cos(2*K1) + 2*K1*(K1 + L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) + ((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(2*K1*(K1 - L)*np.cos(2*K1) - (K1 - L + K1**2*L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((2*K1*(K1 + L)*np.cos(2*K1) + (-K1 - L + K1**2*L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*((1 + K1**2)*np.cos(2*K1) - 2*K1*(K1 + 2*K1**3 - np.sin(2*K1))) - (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(np.cos(2*K1) + K1*(-K1 + np.sin(2*K1))))/np.sqrt(-K1**2 + K1*L) - (2*K1*L*(np.cos(2*K1) + K1*(K1 + np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*(K1**2 + K2**2 - 2*K1*K2*x)*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + ((L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5)*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((-0.5*np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*((1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(-np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) + (2*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/(512.*K1**6*(K1**2 + K2**2 - 2*K1*K2*x)**3) - (((2*K1**4*np.cos(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((1 - K1**2)*np.cos(2*K1) + K1*(K1*(-1 - 2*K1**2 + K1*L) + np.sin(2*K1))))/(2.*np.sqrt(-K1**2 + K1*L)) - (((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 + K1**2*L - np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((1 + K1 - K1**2)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*np.sin(2*K1) - K1*np.cos(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*L)/(2.*np.sqrt(-K1**2 + K1*L)) - 2*np.cos(deltaN*np.sqrt(K1**2 + K1*L)) + (L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))) + (2*K1**3*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L)) - K1*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((1 + K1 - K1**2)*np.cos(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + K1*np.sin(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*L)/(2.*np.sqrt(-K1**2 + K1*L)) - 2*np.cos(deltaN*np.sqrt(K1**2 + K1*L)) + (L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))))*(-((((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (1 + 2*(K1**2 + K2**2 - 2*K1*K2*x))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + (L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*(-2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/(K1**2 + K2**2 - 2*K1*K2*x)) + ((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - ((L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + ((np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))))/(256.*K1**4*(K1**2 + K2**2 - 2*K1*K2*x)**1.5) - (((-2*K1**3*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L)) - K1*np.sin(2*K1)) - (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) - ((K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((1 + K1 - K1**2)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*np.sin(2*K1) - K1*np.cos(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*L)/(2.*np.sqrt(-K1**2 + K1*L)) - 2*np.cos(deltaN*np.sqrt(K1**2 + K1*L)) + (L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))) + (2*K1**4*np.cos(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((1 - K1**2)*np.cos(2*K1) + K1*(K1*(-1 - 2*K1**2 + K1*L) + np.sin(2*K1))))/(2.*np.sqrt(-K1**2 + K1*L)) - (((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 + K1**2*L - np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((1 + K1 - K1**2)*np.cos(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + K1*np.sin(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*L)/(2.*np.sqrt(-K1**2 + K1*L)) - 2*np.cos(deltaN*np.sqrt(K1**2 + K1*L)) + (L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))))*((K1**2 + K2**2 - 2*K1*K2*x)*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - ((L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*(-2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + ((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (1 + 2*(K1**2 + K2**2 - 2*K1*K2*x))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + (L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + ((np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))))/(256.*K1**4*(K1**2 + K2**2 - 2*K1*K2*x)**2.5)))/(32.*K1*K2**4*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + ((((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(K1*np.cos(2*K1) - np.sin(2*K1)))/np.sqrt(-K1**2 + K1*L) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(-2*K1*np.cos(2*K1) + (1 + K1**2)*np.sin(2*K1)) + (2*K1*L*(K1*np.cos(2*K1) - np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(2*K1**2*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(-K1 - 2*K1**3 + L + K1**2*L - 2*(K1 - L + K1**2*L)*np.cos(2*K1) - 4*K1*(K1 - L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) - ((K1 + 2*K1**3 + L + K1**2*L + 2*(K1 + L - K1**2*L)*np.cos(2*K1) + 4*K1*(K1 + L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) + 2*(-((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(np.cos(2*K1) + K1*np.sin(2*K1)))/np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*((1 + K1**2)*np.cos(2*K1) + 2*K1*np.sin(2*K1)) - (2*K1*L*(np.cos(2*K1) + K1*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(-2*K1*(K1 - L)*np.cos(2*K1) + (K1 - L + K1**2*L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((-2*K1*(K1 + L)*np.cos(2*K1) + (K1 + L - K1**2*L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) + 2*K1*(K1*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*(2*K1 - L + L*np.cos(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(2*K1*np.cos(2*K1) + (-1 - K1 + K1**2)*np.sin(2*K1)) - (K1*(2*K1 + L - L*np.cos(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(2*K1**4*np.cos(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((1 - K1**2)*np.cos(2*K1) + K1*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + (((1 - K1**2)*np.cos(2*K1) + K1*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) + ((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(1 + K1*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + (-0.5*np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(-1 - 2*K1**2 + K1*(-1 - K1 + K1**2)*np.cos(2*K1) - 2*K1**2*np.sin(2*K1)) + (K1*L*(1 + K1*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(2*K1**4*np.sin(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(-(K1*np.cos(2*K1)) - (-1 + K1**2)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((-(K1*np.cos(2*K1)) - (-1 + K1**2)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))))*(-0.001953125*((((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(-2*K2*np.cos(2*K2) + (1 + K2**2)*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*(K2**3*(2*K2 - L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2)))/np.sqrt(-K2**2 + K2*L) + (2*K2*(K2**3*(2*K2 + L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(2*K2*(K2 - L)*np.cos(2*K2) - (K2 - L + K2**2*L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((2*K2*(K2 + L)*np.cos(2*K2) + (-K2 - L + K2**2*L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) - ((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((K2 - L + K2**2*L)*np.cos(2*K2) + 2*K2*(K2 - L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + (((K2 + L - K2**2*L)*np.cos(2*K2) + 2*K2*(K2 + L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*((1 + K2**2)*np.cos(2*K2) - 2*K2*(K2 + 2*K2**3 - np.sin(2*K2))) - (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(np.cos(2*K2) + K2*(-K2 + np.sin(2*K2))))/np.sqrt(-K2**2 + K2*L) - (2*K2*L*(np.cos(2*K2) + K2*(K2 + np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*(K1**2 + K2**2 - 2*K1*K2*x)*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + ((L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5)*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(-2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + (2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/(K2**6*(K1**2 + K2**2 - 2*K1*K2*x)**3) - ((((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(-2*K2*np.cos(2*K2) + (1 + K2**2)*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*(K2**3*(2*K2 - L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2)))/np.sqrt(-K2**2 + K2*L) + (2*K2*(K2**3*(2*K2 + L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((K2 - L + K2**2*L)*np.cos(2*K2) + 2*K2*(K2 - L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + (((K2 + L - K2**2*L)*np.cos(2*K2) + 2*K2*(K2 + L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) + ((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(2*K2*(K2 - L)*np.cos(2*K2) - (K2 - L + K2**2*L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((2*K2*(K2 + L)*np.cos(2*K2) + (-K2 - L + K2**2*L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*((1 + K2**2)*np.cos(2*K2) - 2*K2*(K2 + 2*K2**3 - np.sin(2*K2))) - (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(np.cos(2*K2) + K2*(-K2 + np.sin(2*K2))))/np.sqrt(-K2**2 + K2*L) - (2*K2*L*(np.cos(2*K2) + K2*(K2 + np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*(K1**2 + K2**2 - 2*K1*K2*x)*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + ((L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5)*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((-0.5*np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*((1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(-np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) + (2*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/(512.*K2**6*(K1**2 + K2**2 - 2*K1*K2*x)**3) - (((2*K2**4*np.cos(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((1 - K2**2)*np.cos(2*K2) + K2*(K2*(-1 - 2*K2**2 + K2*L) + np.sin(2*K2))))/(2.*np.sqrt(-K2**2 + K2*L)) - (((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 + K2**2*L - np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((1 + K2 - K2**2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*np.sin(2*K2) - K2*np.cos(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*L)/(2.*np.sqrt(-K2**2 + K2*L)) - 2*np.cos(deltaN*np.sqrt(K2**2 + K2*L)) + (L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))) + (2*K2**3*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L)) - K2*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((1 + K2 - K2**2)*np.cos(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + K2*np.sin(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*L)/(2.*np.sqrt(-K2**2 + K2*L)) - 2*np.cos(deltaN*np.sqrt(K2**2 + K2*L)) + (L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))))*(-((((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (1 + 2*(K1**2 + K2**2 - 2*K1*K2*x))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + (L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*(-2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/(K1**2 + K2**2 - 2*K1*K2*x)) + ((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - ((L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + ((np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))))/(256.*K2**4*(K1**2 + K2**2 - 2*K1*K2*x)**1.5) - (((-2*K2**3*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L)) - K2*np.sin(2*K2)) - (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) - ((K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((1 + K2 - K2**2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*np.sin(2*K2) - K2*np.cos(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*L)/(2.*np.sqrt(-K2**2 + K2*L)) - 2*np.cos(deltaN*np.sqrt(K2**2 + K2*L)) + (L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))) + (2*K2**4*np.cos(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((1 - K2**2)*np.cos(2*K2) + K2*(K2*(-1 - 2*K2**2 + K2*L) + np.sin(2*K2))))/(2.*np.sqrt(-K2**2 + K2*L)) - (((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 + K2**2*L - np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((1 + K2 - K2**2)*np.cos(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + K2*np.sin(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*L)/(2.*np.sqrt(-K2**2 + K2*L)) - 2*np.cos(deltaN*np.sqrt(K2**2 + K2*L)) + (L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))))*((K1**2 + K2**2 - 2*K1*K2*x)*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - ((L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*(-2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + ((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (1 + 2*(K1**2 + K2**2 - 2*K1*K2*x))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + (L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + ((np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))))/(256.*K2**4*(K1**2 + K2**2 - 2*K1*K2*x)**2.5)))/(32.*K1**4*K2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + ((-0.001953125*((((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(-2*K1*np.cos(2*K1) + (1 + K1**2)*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*(K1**3*(2*K1 - L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1)))/np.sqrt(-K1**2 + K1*L) + (2*K1*(K1**3*(2*K1 + L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(2*K1*(K1 - L)*np.cos(2*K1) - (K1 - L + K1**2*L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((2*K1*(K1 + L)*np.cos(2*K1) + (-K1 - L + K1**2*L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) - ((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((K1 - L + K1**2*L)*np.cos(2*K1) + 2*K1*(K1 - L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + (((K1 + L - K1**2*L)*np.cos(2*K1) + 2*K1*(K1 + L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*((1 + K1**2)*np.cos(2*K1) - 2*K1*(K1 + 2*K1**3 - np.sin(2*K1))) - (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(np.cos(2*K1) + K1*(-K1 + np.sin(2*K1))))/np.sqrt(-K1**2 + K1*L) - (2*K1*L*(np.cos(2*K1) + K1*(K1 + np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2 + 2*K2**3 - L - K2**2*L))/(2.*np.sqrt(-K2**2 + K2*L)) - 2*K2**2*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + ((K2 + 2*K2**3 + L + K2**2*L)*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(-2*K2*np.cos(2*K2) + (1 + K2**2)*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*(K2**3*(2*K2 - L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2)))/np.sqrt(-K2**2 + K2*L) + (2*K2*(K2**3*(2*K2 + L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)))/(K1**6*K2**6) - ((((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(-2*K1*np.cos(2*K1) + (1 + K1**2)*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*(K1**3*(2*K1 - L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1)))/np.sqrt(-K1**2 + K1*L) + (2*K1*(K1**3*(2*K1 + L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((K1 - L + K1**2*L)*np.cos(2*K1) + 2*K1*(K1 - L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + (((K1 + L - K1**2*L)*np.cos(2*K1) + 2*K1*(K1 + L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) + ((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(2*K1*(K1 - L)*np.cos(2*K1) - (K1 - L + K1**2*L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((2*K1*(K1 + L)*np.cos(2*K1) + (-K1 - L + K1**2*L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*((1 + K1**2)*np.cos(2*K1) - 2*K1*(K1 + 2*K1**3 - np.sin(2*K1))) - (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(np.cos(2*K1) + K1*(-K1 + np.sin(2*K1))))/np.sqrt(-K1**2 + K1*L) - (2*K1*L*(np.cos(2*K1) + K1*(K1 + np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2 + 2*K2**3 - L - K2**2*L))/(2.*np.sqrt(-K2**2 + K2*L)) - 2*K2**2*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + ((K2 + 2*K2**3 + L + K2**2*L)*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((-0.5*np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*((1 + K2**2)*np.cos(2*K2) - 2*K2*(K2 + 2*K2**3 - np.sin(2*K2))) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(np.cos(2*K2) + K2*(-K2 + np.sin(2*K2))))/np.sqrt(-K2**2 + K2*L) + (2*K2*L*(np.cos(2*K2) + K2*(K2 + np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)))/(512.*K1**6*K2**6) - (((-2*K1**3*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L)) - K1*np.sin(2*K1)) - (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) - ((K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((1 + K1 - K1**2)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*np.sin(2*K1) - K1*np.cos(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*L)/(2.*np.sqrt(-K1**2 + K1*L)) - 2*np.cos(deltaN*np.sqrt(K1**2 + K1*L)) + (L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))) + (2*K1**4*np.cos(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((1 - K1**2)*np.cos(2*K1) + K1*(K1*(-1 - 2*K1**2 + K1*L) + np.sin(2*K1))))/(2.*np.sqrt(-K1**2 + K1*L)) - (((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 + K1**2*L - np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((1 + K1 - K1**2)*np.cos(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + K1*np.sin(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*L)/(2.*np.sqrt(-K1**2 + K1*L)) - 2*np.cos(deltaN*np.sqrt(K1**2 + K1*L)) + (L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))))*(K2**2*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(2*K2 - L))/(2.*np.sqrt(-K2**2 + K2*L)) - ((2*K2 + L)*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(-2*K2**4*np.cos(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 - K2**2*L - np.sin(2*K2))))/(2.*np.sqrt(-K2**2 + K2*L)) + (((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 + K2**2*L - np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) + ((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L)/(2.*np.sqrt(-K2**2 + K2*L)) + (1 + 2*K2**2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + (K2*L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(2*K2**3*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L)) - K2*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))))/(256.*K1**4*K2**5) - (((2*K1**4*np.cos(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((1 - K1**2)*np.cos(2*K1) + K1*(K1*(-1 - 2*K1**2 + K1*L) + np.sin(2*K1))))/(2.*np.sqrt(-K1**2 + K1*L)) - (((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 + K1**2*L - np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((1 + K1 - K1**2)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*np.sin(2*K1) - K1*np.cos(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*L)/(2.*np.sqrt(-K1**2 + K1*L)) - 2*np.cos(deltaN*np.sqrt(K1**2 + K1*L)) + (L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))) + (2*K1**3*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L)) - K1*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((1 + K1 - K1**2)*np.cos(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + K1*np.sin(2*K1)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*L)/(2.*np.sqrt(-K1**2 + K1*L)) - 2*np.cos(deltaN*np.sqrt(K1**2 + K1*L)) + (L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))))*(-((((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L)/(2.*np.sqrt(-K2**2 + K2*L)) + (1 + 2*K2**2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + (K2*L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(-2*K2**4*np.cos(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 - K2**2*L - np.sin(2*K2))))/(2.*np.sqrt(-K2**2 + K2*L)) + (((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 + K2**2*L - np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)))/K2**2) + ((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(2*K2 - L))/(2.*np.sqrt(-K2**2 + K2*L)) - ((2*K2 + L)*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(2*K2**3*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L)) - K2*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))))/(256.*K1**4*K2**3))*(((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(-2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + (2*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*(2*(K1**2 + K2**2 - 2*K1*K2*x)*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(L - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) - 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - 2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - 4*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - ((L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + 2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 4*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + 2*(-((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*((1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) - (2*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + ((-2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) - (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + ((-(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) - (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (-0.5*np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(-1 - 2*(K1**2 + K2**2 - 2*K1*K2*x) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(-1 - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - 2*(K1**2 + K2**2 - 2*K1*K2*x)*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + (L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) - (np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*(2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((1 - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (((1 - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))))/(32.*K1*K2*(K1**2 + K2**2 - 2*K1*K2*x)**2) + ((-0.001953125*(((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1 + 2*K1**3 - L - K1**2*L))/(2.*np.sqrt(-K1**2 + K1*L)) - 2*K1**2*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + ((K1 + 2*K1**3 + L + K1**2*L)*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(-2*K1*np.cos(2*K1) + (1 + K1**2)*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*(K1**3*(2*K1 - L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1)))/np.sqrt(-K1**2 + K1*L) + (2*K1*(K1**3*(2*K1 + L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(-2*K2*np.cos(2*K2) + (1 + K2**2)*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*(K2**3*(2*K2 - L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2)))/np.sqrt(-K2**2 + K2*L) + (2*K2*(K2**3*(2*K2 + L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(2*K2*(K2 - L)*np.cos(2*K2) - (K2 - L + K2**2*L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((2*K2*(K2 + L)*np.cos(2*K2) + (-K2 - L + K2**2*L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) - ((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((K2 - L + K2**2*L)*np.cos(2*K2) + 2*K2*(K2 - L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + (((K2 + L - K2**2*L)*np.cos(2*K2) + 2*K2*(K2 + L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*((1 + K2**2)*np.cos(2*K2) - 2*K2*(K2 + 2*K2**3 - np.sin(2*K2))) - (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(np.cos(2*K2) + K2*(-K2 + np.sin(2*K2))))/np.sqrt(-K2**2 + K2*L) - (2*K2*L*(np.cos(2*K2) + K2*(K2 + np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))))/(K1**6*K2**6) - (((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1 + 2*K1**3 - L - K1**2*L))/(2.*np.sqrt(-K1**2 + K1*L)) - 2*K1**2*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + ((K1 + 2*K1**3 + L + K1**2*L)*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((-0.5*np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*((1 + K1**2)*np.cos(2*K1) - 2*K1*(K1 + 2*K1**3 - np.sin(2*K1))) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(np.cos(2*K1) + K1*(-K1 + np.sin(2*K1))))/np.sqrt(-K1**2 + K1*L) + (2*K1*L*(np.cos(2*K1) + K1*(K1 + np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(-2*K2*np.cos(2*K2) + (1 + K2**2)*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*(K2**3*(2*K2 - L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2)))/np.sqrt(-K2**2 + K2*L) + (2*K2*(K2**3*(2*K2 + L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((K2 - L + K2**2*L)*np.cos(2*K2) + 2*K2*(K2 - L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + (((K2 + L - K2**2*L)*np.cos(2*K2) + 2*K2*(K2 + L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) + ((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(2*K2*(K2 - L)*np.cos(2*K2) - (K2 - L + K2**2*L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((2*K2*(K2 + L)*np.cos(2*K2) + (-K2 - L + K2**2*L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*((1 + K2**2)*np.cos(2*K2) - 2*K2*(K2 + 2*K2**3 - np.sin(2*K2))) - (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(np.cos(2*K2) + K2*(-K2 + np.sin(2*K2))))/np.sqrt(-K2**2 + K2*L) - (2*K2*L*(np.cos(2*K2) + K2*(K2 + np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))))/(512.*K1**6*K2**6) - ((K1**2*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(2*K1 - L))/(2.*np.sqrt(-K1**2 + K1*L)) - ((2*K1 + L)*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(-2*K1**4*np.cos(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 - K1**2*L - np.sin(2*K1))))/(2.*np.sqrt(-K1**2 + K1*L)) + (((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 + K1**2*L - np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) + ((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L)/(2.*np.sqrt(-K1**2 + K1*L)) + (1 + 2*K1**2)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + (K1*L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(2*K1**3*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L)) - K1*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)))*((-2*K2**3*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L)) - K2*np.sin(2*K2)) - (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) - ((K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((1 + K2 - K2**2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*np.sin(2*K2) - K2*np.cos(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*L)/(2.*np.sqrt(-K2**2 + K2*L)) - 2*np.cos(deltaN*np.sqrt(K2**2 + K2*L)) + (L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))) + (2*K2**4*np.cos(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((1 - K2**2)*np.cos(2*K2) + K2*(K2*(-1 - 2*K2**2 + K2*L) + np.sin(2*K2))))/(2.*np.sqrt(-K2**2 + K2*L)) - (((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 + K2**2*L - np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((1 + K2 - K2**2)*np.cos(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + K2*np.sin(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*L)/(2.*np.sqrt(-K2**2 + K2*L)) - 2*np.cos(deltaN*np.sqrt(K2**2 + K2*L)) + (L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)))))/(256.*K1**5*K2**4) - ((-((((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L)/(2.*np.sqrt(-K1**2 + K1*L)) + (1 + 2*K1**2)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + (K1*L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(-2*K1**4*np.cos(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 - K1**2*L - np.sin(2*K1))))/(2.*np.sqrt(-K1**2 + K1*L)) + (((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 + K1**2*L - np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)))/K1**2) + ((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(2*K1 - L))/(2.*np.sqrt(-K1**2 + K1*L)) - ((2*K1 + L)*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(2*K1**3*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L)) - K1*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)))*((2*K2**4*np.cos(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((1 - K2**2)*np.cos(2*K2) + K2*(K2*(-1 - 2*K2**2 + K2*L) + np.sin(2*K2))))/(2.*np.sqrt(-K2**2 + K2*L)) - (((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 + K2**2*L - np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((1 + K2 - K2**2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*np.sin(2*K2) - K2*np.cos(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*L)/(2.*np.sqrt(-K2**2 + K2*L)) - 2*np.cos(deltaN*np.sqrt(K2**2 + K2*L)) + (L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))) + (2*K2**3*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L)) - K2*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((1 + K2 - K2**2)*np.cos(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + K2*np.sin(2*K2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*L)/(2.*np.sqrt(-K2**2 + K2*L)) - 2*np.cos(deltaN*np.sqrt(K2**2 + K2*L)) + (L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)))))/(256.*K1**3*K2**4))*(((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(-2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + (2*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*(2*(K1**2 + K2**2 - 2*K1*K2*x)*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(L - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) - 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - 2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - 4*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - ((L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + 2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 4*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + 2*(-((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*((1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) - (2*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + ((-2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(-(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) - (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + ((-(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) - (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (-0.5*np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(-1 - 2*(K1**2 + K2**2 - 2*K1*K2*x) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(-1 - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - 2*(K1**2 + K2**2 - 2*K1*K2*x)*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + (L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) - (np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*(2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((1 - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (((1 - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))))/(32.*K1*K2*(K1**2 + K2**2 - 2*K1*K2*x)**2) + ((((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(K2*np.cos(2*K2) - np.sin(2*K2)))/np.sqrt(-K2**2 + K2*L) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(-2*K2*np.cos(2*K2) + (1 + K2**2)*np.sin(2*K2)) + (2*K2*L*(K2*np.cos(2*K2) - np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(2*K2**2*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(-K2 - 2*K2**3 + L + K2**2*L - 2*(K2 - L + K2**2*L)*np.cos(2*K2) - 4*K2*(K2 - L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) - ((K2 + 2*K2**3 + L + K2**2*L + 2*(K2 + L - K2**2*L)*np.cos(2*K2) + 4*K2*(K2 + L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) + 2*(-((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(np.cos(2*K2) + K2*np.sin(2*K2)))/np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*((1 + K2**2)*np.cos(2*K2) + 2*K2*np.sin(2*K2)) - (2*K2*L*(np.cos(2*K2) + K2*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(-2*K2*(K2 - L)*np.cos(2*K2) + (K2 - L + K2**2*L)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((-2*K2*(K2 + L)*np.cos(2*K2) + (K2 + L - K2**2*L)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) + 2*K2*(K2*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*(2*K2 - L + L*np.cos(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(2*K2*np.cos(2*K2) + (-1 - K2 + K2**2)*np.sin(2*K2)) - (K2*(2*K2 + L - L*np.cos(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(2*K2**4*np.cos(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((1 - K2**2)*np.cos(2*K2) + K2*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + (((1 - K2**2)*np.cos(2*K2) + K2*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) + ((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(1 + K2*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + (-0.5*np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(-1 - 2*K2**2 + K2*(-1 - K2 + K2**2)*np.cos(2*K2) - 2*K2**2*np.sin(2*K2)) + (K2*L*(1 + K2*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(2*K2**4*np.sin(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(-(K2*np.cos(2*K2)) - (-1 + K2**2)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((-(K2*np.cos(2*K2)) - (-1 + K2**2)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))))*(-0.001953125*(((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1 + 2*K1**3 - L - K1**2*L))/(2.*np.sqrt(-K1**2 + K1*L)) - 2*K1**2*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + ((K1 + 2*K1**3 + L + K1**2*L)*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(-2*K1*np.cos(2*K1) + (1 + K1**2)*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*(K1**3*(2*K1 - L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1)))/np.sqrt(-K1**2 + K1*L) + (2*K1*(K1**3*(2*K1 + L) + K1*L*np.cos(2*K1) - L*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(-2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + (2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - (-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + ((2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-L - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) - ((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (((L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*((1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))) - (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(-np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) - (2*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))))/(K1**6*(K1**2 + K2**2 - 2*K1*K2*x)**3) - (((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1 + 2*K1**3 - L - K1**2*L))/(2.*np.sqrt(-K1**2 + K1*L)) - 2*K1**2*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + ((K1 + 2*K1**3 + L + K1**2*L)*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((-0.5*np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*((1 + K1**2)*np.cos(2*K1) - 2*K1*(K1 + 2*K1**3 - np.sin(2*K1))) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(np.cos(2*K1) + K1*(-K1 + np.sin(2*K1))))/np.sqrt(-K1**2 + K1*L) + (2*K1*L*(np.cos(2*K1) + K1*(K1 + np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(-2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + (2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (((L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + ((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - (-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + ((2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-L - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*((1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))) - (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(-np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) - (2*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))))/(512.*K1**6*(K1**2 + K2**2 - 2*K1*K2*x)**3) - ((K1**2*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(2*K1 - L))/(2.*np.sqrt(-K1**2 + K1*L)) - ((2*K1 + L)*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(-2*K1**4*np.cos(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 - K1**2*L - np.sin(2*K1))))/(2.*np.sqrt(-K1**2 + K1*L)) + (((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 + K1**2*L - np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) + ((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L)/(2.*np.sqrt(-K1**2 + K1*L)) + (1 + 2*K1**2)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + (K1*L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(2*K1**3*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L)) - K1*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)))*((-0.5*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) - 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) - ((np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L)/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + (L*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + (2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((1 - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((-1 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - 2*(K1**2 + K2**2 - 2*K1*K2*x))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - (((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L)/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + (L*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))))/(256.*K1**5*(K1**2 + K2**2 - 2*K1*K2*x)**2) - ((-((((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L)/(2.*np.sqrt(-K1**2 + K1*L)) + (1 + 2*K1**2)*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + (K1*L*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(-2*K1**4*np.cos(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 - K1**2*L - np.sin(2*K1))))/(2.*np.sqrt(-K1**2 + K1*L)) + (((-1 + K1**2)*np.cos(2*K1) + K1*(K1 + 2*K1**3 + K1**2*L - np.sin(2*K1)))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)))/K1**2) + ((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(2*K1 - L))/(2.*np.sqrt(-K1**2 + K1*L)) - ((2*K1 + L)*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(2*K1**3*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L)) - K1*np.sin(2*K1)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((K1*np.cos(2*K1) + (-1 + K1**2)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)))*((2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((1 - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((-1 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - 2*(K1**2 + K2**2 - 2*K1*K2*x))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - (((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L)/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + (L*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + ((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + ((np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L)/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + (L*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))))/(256.*K1**3*(K1**2 + K2**2 - 2*K1*K2*x)**2)))/(32.*K1*K2**4*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + ((((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(K1*np.cos(2*K1) - np.sin(2*K1)))/np.sqrt(-K1**2 + K1*L) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(-2*K1*np.cos(2*K1) + (1 + K1**2)*np.sin(2*K1)) + (2*K1*L*(K1*np.cos(2*K1) - np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(2*K1**2*(np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. + np.cos(deltaN*np.sqrt(K1**2 + K1*L))) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(-K1 - 2*K1**3 + L + K1**2*L - 2*(K1 - L + K1**2*L)*np.cos(2*K1) - 4*K1*(K1 - L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) - ((K1 + 2*K1**3 + L + K1**2*L + 2*(K1 + L - K1**2*L)*np.cos(2*K1) + 4*K1*(K1 + L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) + 2*(-((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(np.cos(2*K1) + K1*np.sin(2*K1)))/np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*((1 + K1**2)*np.cos(2*K1) + 2*K1*np.sin(2*K1)) - (2*K1*L*(np.cos(2*K1) + K1*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(-2*K1*(K1 - L)*np.cos(2*K1) + (K1 - L + K1**2*L)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((-2*K1*(K1 + L)*np.cos(2*K1) + (K1 + L - K1**2*L)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) + 2*K1*(K1*((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*(2*K1 - L + L*np.cos(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))/2. - np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(2*K1*np.cos(2*K1) + (-1 - K1 + K1**2)*np.sin(2*K1)) - (K1*(2*K1 + L - L*np.cos(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(2*K1**4*np.cos(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*((1 - K1**2)*np.cos(2*K1) + K1*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + (((1 - K1**2)*np.cos(2*K1) + K1*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L)) + ((np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*K1*L*(1 + K1*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + (-0.5*np.exp(deltaN*np.sqrt(-K1**2 + K1*L)) + np.cos(deltaN*np.sqrt(K1**2 + K1*L)))*(-1 - 2*K1**2 + K1*(-1 - K1 + K1**2)*np.cos(2*K1) - 2*K1**2*np.sin(2*K1)) + (K1*L*(1 + K1*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))*(2*K1**4*np.sin(2*K1) + (np.exp(deltaN*np.sqrt(-K1**2 + K1*L))*(-(K1*np.cos(2*K1)) - (-1 + K1**2)*np.sin(2*K1)))/(2.*np.sqrt(-K1**2 + K1*L)) + ((-(K1*np.cos(2*K1)) - (-1 + K1**2)*np.sin(2*K1))*np.sin(deltaN*np.sqrt(K1**2 + K1*L)))/np.sqrt(K1**2 + K1*L))))*(-0.001953125*(((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2 + 2*K2**3 - L - K2**2*L))/(2.*np.sqrt(-K2**2 + K2*L)) - 2*K2**2*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + ((K2 + 2*K2**3 + L + K2**2*L)*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*(-2*K2*np.cos(2*K2) + (1 + K2**2)*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*(K2**3*(2*K2 - L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2)))/np.sqrt(-K2**2 + K2*L) + (2*K2*(K2**3*(2*K2 + L) + K2*L*np.cos(2*K2) - L*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(-2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + (2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - (-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + ((2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-L - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) - ((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (((L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*((1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))) - (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(-np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) - (2*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))))/(K2**6*(K1**2 + K2**2 - 2*K1*K2*x)**3) - (((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2 + 2*K2**3 - L - K2**2*L))/(2.*np.sqrt(-K2**2 + K2*L)) - 2*K2**2*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + ((K2 + 2*K2**3 + L + K2**2*L)*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*((-0.5*np.exp(deltaN*np.sqrt(-K2**2 + K2*L)) + np.cos(deltaN*np.sqrt(K2**2 + K2*L)))*((1 + K2**2)*np.cos(2*K2) - 2*K2*(K2 + 2*K2**3 - np.sin(2*K2))) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L*(np.cos(2*K2) + K2*(-K2 + np.sin(2*K2))))/np.sqrt(-K2**2 + K2*L) + (2*K2*L*(np.cos(2*K2) + K2*(K2 + np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((-L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*(-2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + (2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((L + 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - L*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (((L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - L*(K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + 2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + ((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(2*(-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - (-L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + ((2*(L + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-L - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*((1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))) - (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(-np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) - (2*L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))))/(512.*K2**6*(K1**2 + K2**2 - 2*K1*K2*x)**3) - ((K2**2*((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(2*K2 - L))/(2.*np.sqrt(-K2**2 + K2*L)) - ((2*K2 + L)*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(-2*K2**4*np.cos(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 - K2**2*L - np.sin(2*K2))))/(2.*np.sqrt(-K2**2 + K2*L)) + (((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 + K2**2*L - np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)) + ((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L)/(2.*np.sqrt(-K2**2 + K2*L)) + (1 + 2*K2**2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + (K2*L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(2*K2**3*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L)) - K2*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)))*((-0.5*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)) - 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) - ((np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L)/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + (L*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + (2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((1 - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((-1 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - 2*(K1**2 + K2**2 - 2*K1*K2*x))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - (((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L)/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + (L*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))))/(256.*K2**5*(K1**2 + K2**2 - 2*K1*K2*x)**2) - ((-((((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*K2*L)/(2.*np.sqrt(-K2**2 + K2*L)) + (1 + 2*K2**2)*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. - np.cos(deltaN*np.sqrt(K2**2 + K2*L))) + (K2*L*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(-2*K2**4*np.cos(2*K2) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 - K2**2*L - np.sin(2*K2))))/(2.*np.sqrt(-K2**2 + K2*L)) + (((-1 + K2**2)*np.cos(2*K2) + K2*(K2 + 2*K2**3 + K2**2*L - np.sin(2*K2)))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)))/K2**2) + ((np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(2*K2 - L))/(2.*np.sqrt(-K2**2 + K2*L)) - ((2*K2 + L)*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L))*(2*K2**3*(np.exp(deltaN*np.sqrt(-K2**2 + K2*L))/2. + np.cos(deltaN*np.sqrt(K2**2 + K2*L)) - K2*np.sin(2*K2)) + (np.exp(deltaN*np.sqrt(-K2**2 + K2*L))*(K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2)))/(2.*np.sqrt(-K2**2 + K2*L)) + ((K2*np.cos(2*K2) + (-1 + K2**2)*np.sin(2*K2))*np.sin(deltaN*np.sqrt(K2**2 + K2*L)))/np.sqrt(K2**2 + K2*L)))*((2*(K1**2 + K2**2 - 2*K1*K2*x)**2*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*((1 - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*((-1 + L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - 2*(K1**2 + K2**2 - 2*K1*K2*x))*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - (((-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + L*(K1**2 + K2**2 - 2*K1*K2*x) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5 - np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L)/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + (L*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + ((np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*(np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))))/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + 2*(K1**2 + K2**2 - 2*K1*K2*x)**1.5*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. + np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) - np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))) + ((np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))) + (-1 + (K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))))*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))*((1 + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))*np.cos(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))/2. - np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x)))) + np.sqrt((K1**2 + K2**2 - 2*K1*K2*x))*np.sin(2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))*(np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) + (np.exp(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x)))*L)/(2.*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) - (K1**2 + K2**2 - 2*K1*K2*x))) - 2*np.cos(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))) + (L*np.sin(deltaN*np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))/np.sqrt(L*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)) + (K1**2 + K2**2 - 2*K1*K2*x))))))/(256.*K2**3*(K1**2 + K2**2 - 2*K1*K2*x)**2)))/(32.*K1**4*K2*np.sqrt((K1**2 + K2**2 - 2*K1*K2*x)))
    return a


def bs_vec(k1, k2, x):
    k1=k1/k00
    k2=k2/k00
    # Calculate distance term
    dist = np.sqrt(k1[:, None, None]**2 + k2[None, :, None]**2 - 2*k1[:, None, None]*k2[None, :, None]*x[None, None, :])
    
    # Define conditions
    condition = (dist < L) & (k1[:, None, None] < L) & (k2[None, :, None] < L)
    
    # Initialize result arrays
    bs_results = np.zeros_like(dist, dtype=np.float64)
    # bs_results = np.zeros_like(dist, dtype=np.complex128)
    # bs_results_imag = np.zeros_like(dist, dtype=np.complex128)
    
    # Apply conditions using np.where and compute results
    bs_results = np.where(condition, bs(k1[:, None, None], k2[None, :, None], x[None, None, :]), bs_results)
    
    # bs_results_imag = np.where(condition, bs(k1[:, None, None]/k00, k2[None, :, None]/k00, x[None, None, :]), bs_results_imag)
    
    return bs_results #, bs_results_imag


# initial time
ti = time.time()

# Convert initial time to hh:mm:ss format
initial_time_str = time.strftime('%H:%M:%S', time.localtime(ti))


# Print the initial time
print('Initial time:', initial_time_str)

# Convert numpy arrays to Dask arrays
k1_dask = da.from_array(k1.flatten(), chunks='auto')
k2_dask = da.from_array(k2.flatten(), chunks='auto')
x_dask = da.from_array(x.flatten(), chunks='auto')

# Apply the bs_vec function to the Dask arrays
bs_results_dask = da.map_blocks(bs_vec, k1_dask, k2_dask, x_dask)

# Compute the results
databs = bs_results_dask.compute()

tf = time.time()
# Convert initial time to hh:mm:ss format
final_time_str = time.strftime('%H:%M:%S', time.localtime(tf))

# Print the initial time
print('Initial time:', final_time_str)
duration = tf - ti
print(f"Computation completed in {duration:.2f} seconds")


# approach number #
# the next approach below uses too much memory, terabyte order
# # Generate meshgrid of indices
# i, j, k = np.meshgrid(range(nkk), range(nkk), range(nx), indexing='ij')

# # Compute results using bs_vec function
# bs_results = bs_vec(k1[i]/k00, k2[j]/k00, x[k])



# # Vectorized calculation of bs_results and bs_results_imag
# for i in tqdm.tqdm(range(nkk)):
#     k1_normalized = k1[i] / k00
#     k2_normalized = k2 / k00
#     results = bs(np.expand_dims(k1_normalized, axis=1), np.expand_dims(k2_normalized, axis=0), x)
#     bs_results[i] = np.real(results)
#     # bs_results_imag[i] = np.imag(results)

##########################################################
    

##########################################################

# Save the data to a .npy file
np.save(full_path, databs)

            

tf=time.time()
print('final time=',tf)

# print(time.gmtime())
deltat=tf-ti
print('computation time: ',deltat)
'''listo'''


for i in [0, 99, 199, 299, 399, 499]:
    for j in [0, 49, 177, 250, 380, 430]:
        plt.plot(kk, databs[:, i, j], label='k[i]=%.2f, x[j]=%.2f' % (kk[i], x[j]))
        plt.yscale('symlog')
        plt.xscale('log')
        plt.legend()
        plt.show()
# plt.plot(kk,databs[0,9,:])
# plt.show()

# plt.plot(kk,databs[0,9,:])

# plt.show()

i=250
j=-1     
plt.plot(kk, databs[:, i, j], label='k2[i]=%.2f, x[j]=%.2f' % (kk[i], x[j]))
plt.plot(kk, abs(databs[:, i, j]), label='abs. k2[i]=%.2f, x[j]=%.2f' % (kk[i], x[j]))
plt.yscale('symlog')
plt.xscale('log')
plt.legend()
plt.show()